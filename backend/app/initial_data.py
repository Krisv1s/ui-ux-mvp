from sqlalchemy.orm import Session


def init_test_data(db: Session):
    from models import Product, Supplier, ProductSupplier, ProductType

    if db.query(ProductType).count() == 0:
        product_types = [
            "Смартфоны", "Ноутбуки", "Планшеты", "Умные часы", "Наушники",
            "Фотоаппараты", "Игровые приставки", "Телевизоры", "Электронные книги", "Дроны",
            "Холодильники", "Стиральные машины", "Пылесосы", "Микроволновки", "Кофемашины",
            "Мультиварки", "Кондиционеры", "Обогреватели", "Мужские футболки", "Женские платья",
            "Джинсы", "Кроссовки", "Куртки", "Сумки", "Ремни", "Головные уборы",
            "Диваны", "Обеденные столы", "Светильники", "Шторы"
        ]
        db.bulk_insert_mappings(
            ProductType,
            [{"name": name} for name in product_types]
        )
        db.commit()

    if db.query(Product).count() == 0:
        products_to_add = []
        product_samples = {
            "Смартфоны": ["iPhone 15 Pro", "Samsung Galaxy S23", "Xiaomi 13T"],
            "Ноутбуки": ["MacBook Pro 16", "Dell XPS 15", "Lenovo ThinkPad X1"],
            "Планшеты": ["iPad Pro 12.9", "Samsung Tab S9", "Huawei MatePad"],
            "Умные часы": ["Apple Watch SE", "Samsung Galaxy Watch Ultra", "Xiaomi Smart Band 9"],
            "Наушники": ["Airpods Pro", "Galaxy Buds 3", "Freebuds Pro 4"],
            "Фотоаппараты": ["Nikon P950", "Kodak WPZ2", "Canon Powershot SX70"],
            "Игровые приставки": ["Playstation 5", "Xbox Series X", "Nintendo Switch"],
            "Телевизоры": ["LG Oled", "Samsung Qled", "Xiaomi TV"],
            "Электронные книги": ["PocketBook 629", "Amazon Kindle"],
            "Дроны": ["Mavic 3 Pro", "Air 2S"],
            "Холодильники": ["LG большой", "Samsung маленький", "Bosch средний"],
            "Стиральные машины": ["LG серая", "Samsung черная", "Indesit белая"],
            "Пылесосы": ["LG Cleaner", "Samsung Vacuum", "Thomas aquatic"],
            "Микроволновки": ["LG Cleaner", "Samsung Vacuum", "Thomas aquatic"],
            "Кофемашины": ["DeLonghi Magnifica S", "Philips LatteGo", "Nespresso Essenza Mini"],
            "Мультиварки": ["Redmond RMC-M90", "Polaris PMC 0526", "Moulinex Cook4Me"],
            "Кондиционеры": ["Daikin Sensira", "LG ArtCool", "Samsung Wind-Free"],
            "Обогреватели": ["Ballu Plaza", "Electrolux Rapid", "Timberk TEC"],
            "Мужские футболки": ["Nike Dri-FIT", "Adidas Essentials", "Puma Classic"],
            "Женские платья": ["Zara летнее", "H&M вечернее", "Mango повседневное"],
            "Джинсы": ["Levi's 501", "Wrangler Regular", "Tommy Hilfiger Slim"],
            "Кроссовки": ["Nike Air Max", "Adidas Ultraboost", "New Balance 574"],
            "Куртки": ["The North Face утеплённая", "Columbia демисезонная", "Bershka кожаная"],
            "Сумки": ["Michael Kors Jet Set", "Guess Vikky", "David Jones через плечо"],
            "Ремни": ["Levi's кожаный", "Tommy Hilfiger тканевый", "Hugo Boss классический"],
            "Головные уборы": ["New Era бейсболка", "Columbia шапка", "Nike панама"],
            "Диваны": ["IKEA Ektorp", "Hoff прямой серый", "Askona угловой"],
            "Обеденные столы": ["IKEA Norden", "Леруа Мерлен круглый", "Hoff стеклянный"],
            "Светильники": ["Philips Hue настольный", "Xiaomi Mi LED", "Леруа потолочный"],
            "Шторы": ["Блэкаут 250см", "Шифон 180см", "Римские 210см"]
        }
        for key, items in product_samples.items():
            product_type = db.query(ProductType).filter_by(name=key).first()
            for item in items:
                products_to_add.append({
                    "name": item,
                    "type": product_type.id,
                    "src": "https://images.unsplash.com/photo-1555041469-a586c61ea9bc?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
                })
        db.bulk_insert_mappings(Product, products_to_add)
        db.commit()

    if db.query(Supplier).count() == 0:
        suppliers = [
            ("Amazon", "import"),
            ("Ebay", "import"),
            ("Aliexpress", "import"),
            ("Joom", "import"),
            ("Walmart", "import"),
            ("Yandex", "local"),
            ("Ozon", "local"),
            ("Wildberries", "local"),
            ("SDEK", "local"),
            ("LAMODA", "local"),
            ("Taobao", "import"),
            ("Tmall", "import"),
            ("ASOS", "import"),
            ("Nike", "import"),
            ("Adidas", "import"),
            ("Apple", "import"),
        ]
        db.bulk_insert_mappings(
            Supplier,
            [{"name": supplier[0], "type": supplier[1]} for supplier in suppliers]
        )
        db.commit()

    if db.query(ProductSupplier).count() == 0:
        product_suppliers = [
            (1, 2, 134560), (1, 12, 89064), (2, 14, 111452), (2, 8, 137685), (3, 16, 88997), (3, 11, 95659),
            (3, 13, 144692), (3, 9, 125868), (4, 2, 75334), (4, 16, 184537), (4, 14, 161479), (5, 8, 125461),
            (5, 3, 117339), (6, 8, 141716), (6, 12, 179781), (7, 5, 98807), (7, 11, 97949), (7, 9, 118323),
            (7, 10, 62776), (8, 14, 85099), (8, 1, 115377), (8, 10, 75545), (8, 13, 41159), (9, 4, 88926),
            (9, 7, 71651), (9, 10, 90419), (9, 12, 83977), (10, 4, 41468), (10, 13, 23498), (11, 1, 15745),
            (11, 5, 42118), (11, 2, 54630), (12, 3, 59423), (12, 1, 43068), (13, 15, 10152), (13, 10, 14234),
            (13, 9, 24098), (13, 7, 28469), (14, 3, 25921), (14, 7, 28308), (14, 15, 7428), (14, 14, 12839),
            (15, 13, 29422), (15, 3, 19170), (15, 5, 20773), (16, 16, 3901), (16, 10, 3594), (17, 10, 2954),
            (17, 11, 3294), (18, 4, 3893), (18, 8, 1706), (18, 13, 3715), (18, 3, 2234), (19, 6, 46095),
            (19, 13, 74056), (19, 4, 56831), (20, 12, 63393), (20, 11, 41846), (20, 2, 84467), (21, 2, 43607),
            (21, 14, 56760), (21, 15, 80263), (21, 7, 89270), (22, 8, 80634), (22, 11, 42046), (23, 9, 99477),
            (23, 12, 108065), (24, 6, 91749), (24, 8, 85283), (25, 7, 2413), (25, 13, 2788), (26, 6, 4370),
            (26, 11, 1310), (26, 15, 3985), (27, 5, 133048), (27, 7, 132884), (27, 14, 158075), (28, 1, 76427),
            (28, 14, 175643), (28, 16, 106651), (29, 5, 3095), (29, 9, 2216), (30, 5, 4078), (30, 15, 3961),
            (30, 12, 3765), (31, 5, 1289), (31, 4, 3933), (31, 14, 4503), (32, 14, 2406), (32, 1, 2451), (33, 15, 4296),
            (33, 10, 4682), (33, 16, 4260), (33, 5, 3309), (34, 5, 1649), (34, 7, 3030), (35, 9, 1058), (35, 7, 4586),
            (36, 15, 2714), (36, 16, 4721), (37, 1, 4776), (37, 12, 4866), (37, 16, 1165), (38, 6, 1238),
            (38, 14, 2710), (39, 3, 2674), (39, 5, 3177), (40, 6, 1520), (40, 3, 2445), (41, 14, 4166), (41, 4, 1375),
            (41, 7, 1996), (42, 15, 2063), (42, 9, 1776), (43, 1, 2556), (43, 3, 2909), (44, 12, 1155), (44, 6, 3710),
            (45, 15, 2800), (45, 4, 1833), (45, 2, 2029), (45, 14, 2978), (46, 14, 3894), (46, 11, 3678), (46, 7, 2746),
            (47, 11, 2779), (47, 3, 1099), (48, 11, 4970), (48, 12, 3460), (49, 12, 3590), (49, 4, 4435),
            (49, 13, 4242), (50, 3, 2269), (50, 13, 1608), (50, 5, 2917), (51, 12, 3593), (51, 15, 3449),
            (52, 13, 2358), (52, 4, 3943), (52, 10, 4496), (52, 12, 3745), (53, 8, 6680), (53, 15, 5209), (53, 5, 8676),
            (54, 15, 5662), (54, 13, 8392), (54, 16, 13611), (55, 11, 7324), (55, 7, 10354), (55, 10, 11068),
            (56, 7, 11068), (56, 3, 12294), (56, 8, 13492), (57, 2, 6878), (57, 11, 4822), (58, 5, 10978),
            (58, 6, 14880), (59, 8, 12328), (59, 6, 3322), (59, 13, 2842), (59, 5, 7683), (60, 7, 7211),
            (60, 13, 13780), (60, 5, 9778), (60, 8, 5834), (61, 2, 4981), (61, 8, 5078), (61, 1, 5903), (62, 14, 11235),
            (62, 10, 3947), (62, 7, 11920), (62, 6, 12112), (63, 10, 5931), (63, 6, 3652), (64, 7, 8834),
            (64, 13, 4521), (64, 5, 7359), (65, 3, 6689), (65, 4, 8568), (66, 10, 8174), (66, 9, 4807), (66, 11, 5011),
            (66, 2, 5142), (67, 8, 7302), (67, 16, 9680), (67, 7, 5329), (67, 12, 3481), (68, 15, 9582), (68, 8, 2875),
            (69, 2, 2946), (69, 11, 14894), (70, 14, 6002), (70, 5, 14837), (70, 8, 3534), (71, 10, 5894),
            (71, 8, 11702), (71, 6, 5318), (72, 13, 14201), (72, 3, 12058), (72, 11, 5362), (72, 4, 14596),
            (73, 16, 2829), (73, 2, 13662), (73, 12, 10078), (74, 15, 14708), (74, 3, 13216), (74, 13, 8104),
            (75, 12, 12050), (75, 6, 3234), (75, 13, 4076), (76, 7, 3637), (76, 9, 10990), (76, 10, 10129),
            (77, 9, 33054), (77, 12, 24265), (77, 8, 28623), (78, 7, 35175), (78, 4, 23763), (78, 9, 22730),
            (79, 7, 8471), (79, 13, 31726), (79, 2, 17732), (80, 3, 37617), (80, 16, 5439), (80, 13, 38946),
            (81, 7, 18691), (81, 10, 20499), (82, 10, 20646), (82, 9, 43307), (82, 12, 40385), (83, 6, 48287),
            (83, 5, 19905), (83, 9, 5904), (84, 6, 18489), (84, 11, 21822), (84, 7, 36164), (84, 1, 36242),
            (85, 16, 41786), (85, 4, 42397), (86, 12, 2908), (86, 11, 1507), (87, 4, 3289), (87, 5, 2237),
            (88, 11, 1147), (88, 6, 1017), (88, 5, 2810), (88, 2, 4879),
        ]
        db.bulk_insert_mappings(
            ProductSupplier,
            [{"product_id": product_supplier[0] , "supplier_id": product_supplier[1], "price": product_supplier[2]} for product_supplier in product_suppliers]
        )
        db.commit()
